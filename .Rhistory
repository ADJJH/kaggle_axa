plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_nodesize = AUCRF(isDriver ~ .,
ntree = 1000,
nodesize = 7,
data = axa.imputed) #.8837
plot(fit_nodesize)
set.seed(12345)
fit_nodesize = AUCRF(isDriver ~ .,
ntree = 1000,
nodesize = 10,
data = axa.imputed) #.8837
plot(fit_nodesize)
set.seed(12345)
fit_nodesize = AUCRF(isDriver ~ .,
ntree = 1000,
nodesize = 6,
data = axa.imputed) #.8837
plot(fit_nodesize)
summary(fit_nodesize)
summary(fit_nodesize)
fit.cv.nodesize = AUCRFcv(fit_nodesize,
nCV = 10, ###Number of folds.
M = 10)
plot(fit.cv.nodesize)
saveRDS(fit.cv.nodesize,"Models/fit.cv.nodesize.rds")
fit.cv.nodesize = readRDS("Models/fit.cv.nodesize.rds")
summary(fit.cv.nodesize) # auc =0.857, 11 kopt
plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
set.seed(12345)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
plot(fit_wo_driver_nodesize)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
saveRDS(fit_wo_driver_nodesize,"Models/fit_wo_driver_nodesize.rds")
plot(fit_wo_driver_nodesize)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.8368 - 11Kopt,
summary(fit_wo_driver_nodesize)
plot(fit_wo_driver_nodesize)
fit_wo_driver_nodesize= AUCRF(isDriver ~ .,
ntree = 1000,
data = axa.imputed[-82],
nodesize = 7) #AUC 0.83 - 19Kopt,
plot(fit_wo_driver_nodesize)
saveRDS(fit_wo_driver_nodesize,"Models/fit_wo_driver_nodesize.rds")
fit.cv_wo_driver_nodesize = AUCRFcv(fit_wo_driver_nodesize,
nCV = 10, ###Number of folds.
M = 10) ###Number of CV repetitions.
summary(fit.cv_wo_driver_nodesize)
getwd()
cor_axa_t[which.min(cor_axa_t)]
which.min(cor_axa_t)
correlation_axa = cor(axa[,79] , axa[,2:87] , use = "pairwise.complete.obs")
cor_axa_t = t(correlation_axa)
which.min(cor_axa_t)
which.max(cor_axa_t[-78,])
cor_axa_t[which.min(cor_axa_t)]
cor_axa_t[which.min(cor_axa_t),]
cor_axa_t[which.min(cor_axa_t),1]
typecor_axa_t
type(cor_axa_t)
class(cor_axa_t)
class(cor_axa_t)[1][1]
cor_axa_t[1][1]
cor_axa_t[1]
View(cor_axa_t)
cor_axa_t[which.min(cor_axa_t),1]
which.min(cor_axa_t)
which.min(cor_axa_t[1])
row.names(cor_axa_t[which.min(cor_axa_t),1])
row.names(cor_axa_t[which.min(cor_axa_t)])
row.names(cor_axa_t[2])
row.names(cor_axa_t[2],)
row.names(cor_axa_t[2,])
a=which.min(cor_axa_t)
a
a=2
a
row.names(cor_axa_t)
row.names(cor_axa_t[1])
row.names(cor_axa_t[[1]])
row.names(cor_axa_t[1])
row.names(cor_axa_t)[1]
row.names(cor_axa_t)[which.min(cor_axa_t)]
fit_nodesize = readRDS("Models/fit_nodesize.rds")
set.seed(12345)
fit_nodesize = AUCRF(isDriver ~ .,
ntree = 1000,
nodesize = 6,
data = axa.imputed) #.8809
set.seed(12345)
fit_nodesize = AUCRF(isDriver ~ .,
ntree = 1000,
nodesize = 6,
data = axa.imputed) #.8809
plot(fit_nodesize) # 11
saveRDS(fit_nodesize,"Models/fit_nodesize.rds")
saveRDS(fit_wo_driver_nodesize,"Models/fit_wo_driver_nodesize.rds")
plot(fit_wo_driver_nodesize)
plot(fit.cv_wo_driver_nodesize)
plot(fit.cv_wo_driver_nodesize)
names(fit.cv_wo_driver_nodesize)
saveRDS(fit.cv_wo_driver_nodesize,"Models/fit.cv_wo_driver_nodesize.rds")
fit.cv_wo_driver_nodesize = readRDS("Models/fit.cv_wo_driver_nodesize.rds")
r fit.cv$ranking[1:15]
fit.cv$ranking[1:15]
class(r fit.cv$ranking[1:15])
class(fit.cv$ranking[1:15])
class(fit.cv$ranking)
fit.cv$ranking
fit.cv$ranking[1:15,]
colnames(fit.cv$ranking[1:15])
rownames(fit.cv$ranking[1:15])
rownames(fit.cv$ranking)
fit.cv$ranking
fit.cv$ranking[1]
fit.cv$ranking[1,1]
row.names(fit.cv$ranking[1,1])
row.names(fit.cv$ranking[1])
names(fit.cv$ranking[1])
library(ggplot2)
library(GGally)
library(MASS)
library(VIM)
library(AUCRF)
library(rpart)
library(mclust)
load("Data/small_axa.RData")
dim(axa) #600 observations, 88 variables.
dim(axa) #600 observations, 88 variables.
names(axa) #Viewing the variable names.
sapply(axa, class) #Viewing the variable class types by variable.
table(sapply(axa, class)) #Viewing the variable class types by class types.
```
The variables of "character" type are first converted to numeric, then variable names are normalized to ensure they do not contain special characters:
```{r, results = "hide"}
###Converting character variables to numeric variables.
converted.columns = sapply(axa[, 2:87], as.numeric)
axa.converted = data.frame(axa[, 1], converted.columns, axa[, 88])
names(axa.converted) = names(axa)
###Renaming variable names.
axa.converted$driver = as.factor(substr(axa.converted$driver_trip, 1, 1))
names = names(axa.converted)
names = gsub("-", "_", names)
names(axa.converted) = names
###Cleaning up the R environment and leaving only one data frame.
remove(axa)
axa = axa.converted
remove(axa.converted)
summary(axa)
sum(is.na(axa)) #3,375 missing values.
600*88
3375/(600*88)
3375*100/(600*88)
sum(is.na(axa)) #3,375 missing values.
na.list = as.data.frame(sapply(axa, function(x) { sum(is.na(x)) })) #Focused in certain variables.
na.list$variable = rownames(na.list)
colnames(na.list) = c("sum.na", "variable")
rownames(na.list) = NULL
na.list[order(na.list$sum.na, decreasing = TRUE), ] #Each variable ranked by their missing values.
var_list = names(axa)[1:89]
boxplot_list = list("null")
for (i in 2:88) {
p = ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() + ggtitle(i)
boxplot_list[[i]] = p
}
boxplot_list[[79]]
for (i in 2:88) {
p = ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("TEST") +
xlab("Driver ID") +
ylab("Attr.HV.SD")
boxplot_list[[i]] = p
}
boxplot_list[[79]]
for (i in 2:88) {
p = ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("TEST") +
xlab("Driver ID") +
ylab("Attribute: High Velocity Standard Deviation")
boxplot_list[[i]] = p
}
boxplot_list[[79]]
var_list = names(axa)[1:89]
boxplot_list = list("null")
for (i in 2:88) {
p = ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity by Driver Type & Driver Truth") +
xlab("Driver ID") +
ylab("Attribute: High Velocity Standard Deviation")
boxplot_list[[i]] = p
}
boxplot_list[[79]]
var_list = names(axa)[1:89]
boxplot_list = list("null")
for (i in 2:88) {
p = ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity by Driver Type & Driver Truth") +
xlab("Driver ID") +
ylab("Attribute: High Velocity Standard Deviation") +
theme_bw()
boxplot_list[[i]] = p
}
boxplot_list[[79]]
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[i]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth") +
xlab("Driver ID") +
ylab("Attribute: High Velocity Standard Deviation") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth") +
xlab("Driver ID") +
ylab("Attribute: High Velocity Standard Deviation") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw() +
coord_fixed()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw() +
coord_fixed(ratio = 1)
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw() +
coord_fixed(ratio = 2)
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw() +
coord_equal(ratio=1)
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw() +
geom_rect()
ggplot(data = axa, aes_string(x = var_list[[89]],
y = var_list[[79]],
fill = var_list[[88]])) +
geom_boxplot() +
ggtitle("Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
axa2 = axa
axa2$isDriver = as.factor(axa2$isDriver)
ggpairs(data = axa2[ , c(3, 4, 5, 7, 8, 18, 23, 24, 28, 32, 34, 48, 74, 75, 76, 77, 78, 79, 84, 85, 88)], color ="isDriver" )
correlation_axa = cor(axa[ , 79] , axa[ , 2:87] , use = "pairwise.complete.obs")
cor_axa_t = t(correlation_axa)
which.min(cor_axa_t)
which.max(cor_axa_t[-78, ])
plot(accel_quantile.0., attr.hv.sd, data = axa)
plot(axa$accel_quantile.0., axa$attr.hv.sd)
ggplot(axa, aex(x = accel_quantile.0., y = attr.hv.sd))
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd))
geom_point()
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point()
geom_point(size = 2)
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point(size = 2)
geom_point(aes(size = 2))
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point(aes(size = 2))
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point() +
ggtitle("Highway Velocity Standard Deviation\VS First Acceleration Quantile\n") +
xlab("\nFirst Acceleration Quantile") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point() +
ggtitle("Highway Velocity Standard Deviation\VS First Acceleration Quantile\n") +
xlab("\nFirst Acceleration Quantile") +
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point() +
ggtitle("Highway Velocity Standard Deviation\nVS First Acceleration Quantile\n") +
xlab("\nFirst Acceleration Quantile") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
ggplot(axa, aes(x = accel_quantile.0., y = attr.hv.sd)) +
geom_point() +
ggtitle("Highway Velocity Standard Deviation\nVS First Acceleration Quantile\n") +
xlab("\nFirst Acceleration Quantile") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
model = lm(attr.hv.sd ~ accel_quantile.0., data = axa)
summary(model) #Viewing the summary information for the model.
par(mfrow = c(2, 2)) #Viewing visual diagnostics for the model.
plot(model)
par(mfrow = c(1, 1))
bc = boxcox(model)
which(bc$y == max(bc$y))
bc$x[54]
transformed = axa$attr.hv.sd^bc$x[54]
model2 = lm(transformed ~ accel_quantile.0., data = axa)
summary(model2) #Viewing the summary information for the model.
par(mfrow = c(2, 2)) #Viewing visual diagnostics for the model.
plot(model2)
par(mfrow = c(1, 1))
col.vec = rep(1, nrow(axa))
col.vec[305] = "red3"
plot(transformed ~ axa$accel_quantile.0., col = col.vec, pch = 16)
model = lm(attr.hv.sd ~ accel_quantile.0., data = axa)
summary(model) #Viewing the summary information for the model.
par(mfrow = c(2, 2)) #Viewing visual diagnostics for the model.
plot(model)
bc = boxcox(model)
par(mfrow = c(1, 1))
bc = boxcox(model)
which(bc$y == max(bc$y))
bc$x[54]
title("Bot")
title("Box-Cox Transformation")
par(mfrow = c(1, 1))
bc = boxcox(model)
which(bc$y == max(bc$y))
bc$x[54]
title("Box-Cox Transformation")
par(mfrow = c(1, 1))
bc = boxcox(model)
which(bc$y == max(bc$y))
bc$x[54]
title("Proposed Box-Cox Transformation")
par(mfrow = c(1, 1))
col.vec = rep(1, nrow(axa))
col.vec[305] = "red3"
plot(transformed ~ axa$accel_quantile.0., col = col.vec, pch = 16)
acceleration = axa$accel_quantile.0.[-305] #Removing the leverage point from our predictor variable.
model3 = lm(transformed[-305] ~ acceleration, data = axa) #Removing the leverage point from our dependent variable.
summary(model3) #Viewing the summary information for the model.
par(mfrow = c(2, 2)) #Viewing visual diagnostics for the model.
plot(model3)
summary(model3)
input = axa$accel_quantile.0.[is.na(axa$attr.hv.sd)] #Selecting predictor values with attr.hv.sd = NA.
index = which(is.na(axa$attr.hv.sd)) #Keeping the index of NA rows.
imputed.values = predict(model3,  newdata = data.frame(acceleration = input))
axa$attr.hv.sd.imputed = transformed
axa[index,"attr.hv.sd.imputed"]  = imputed.values
ggplot(data = axa, aes(x = driver,
y = attr.hv.sd.imputed,
fill = isDriver)) +
geom_boxplot() +
ggtitle("Boxplot of Imputed Variable: attr.hv.sd.imputed")
aov_prior = aov(axa$attr.hv.sd ~ axa$driver + axa$isDriver)
summary(aov_prior) #Significant predictor before imputation.
aov_post = aov(axa$attr.hv.sd.imputed ~ axa$driver + axa$isDriver)
summary(aov_post) #Insignificant predictor after imputation.
```{r}
model_glm = glm(as.factor(isDriver) ~ attr.hv.sd.imputed,
data = axa,
family = "binomial")
summary(model_glm) #Insignificant model.
pred = ifelse(predict(model_glm, type = "response") > 0.5, "TRUE", "FALSE")
table(pred, as.factor(axa$isDriver)) #All observations classified as "TRUE".
ggplot(data = axa, aes(x = driver,
y = attr.hv.sd.imputed,
fill = isDriver)) +
geom_boxplot() +
ggtitle("Boxplot of Imputed Variable: attr.hv.sd.imputed")
ggplot(data = axa, aes(x = driver,
y = attr.hv.sd.imputed,
fill = isDriver)) +
geom_boxplot() +
ggtitle("Imputed Highway Velocity Standard Deviation\nby Driver Type & Driver Truth\n") +
xlab("\nDriver ID") +
ylab("Attribute: High Velocity Standard Deviation\n") +
theme_bw()
aov_prior = aov(axa$attr.hv.sd ~ axa$driver + axa$isDriver)
summary(aov_prior) #Significant predictor before imputation.
aov_post = aov(axa$attr.hv.sd.imputed ~ axa$driver + axa$isDriver)
summary(aov_post) #Insignificant predictor after imputation.
na.list
fit_wo_driver_nodesize_7 = readRDS("Models/fit_wo_driver_nodesize_7.rds")
summary(fit_wo_driver_nodesize_7)
plot(fit_wo_driver_nodesize_7)
names(fit_wo_driver_nodesize_7)
par(mfrow=c(1,1))
plot(fit_wo_driver_nodesize_7)
summary(fit_wo_driver_nodesize_7)
fit.cv_wo_driver_nodesize_7 = readRDS("Models/fit.cv_wo_driver_nodesize_7.rds")
summary(fit.cv_wo_driver_nodesize_7)
plot(fit.cv_wo_driver_nodesize_7)
names(fit.cv_wo_driver_nodesize_7)
